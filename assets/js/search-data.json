{"0": {
    "doc": "Analysis and Surveys",
    "title": "Analysis and Surveys",
    "content": "A number of authors have analyzed the emergence of serverless computing, seeking to explain the trend. Baldini et al. {% cite baldini2017serverless %} and Lynn et al. {% cite lynn2017preliminary %} provide early surveys, van Eyk et al. {% cite van2018serverless %} place serverless in a historical context, and Castro et al. {% cite castro2019rise %} provide a more recent survey that includes a comprehensive analysis of FaaS. Jonas et al. describe serverless in terms of a new programming model for the cloud {% cite jonas2019cloud %}, and Schleier-Smith et al. emphasize the role of serverless computing as the next phase of cloud computing {% cite schleiersmith2021serverless %}. Hellerstein et al. {% cite hellerstein2019 %} focus on the limitations of FaaS, thus highlighting targets for innovation. ",
    "url": "https://serverlessresearch.github.io/literatureguide/analysis-and-surveys/",
    "relUrl": "/analysis-and-surveys/"
  },"1": {
    "doc": "Economics",
    "title": "Economics",
    "content": "Several [high-level articles]({% link 01_analysis_surveys.markdown %}) touch on the economics of serverless computing. Adzic et al. {% cite adzic2017serverless %} use a customer case study to look at the costs of serverless computing. Eivy et al. {% cite eivy2017wary %} warn of hidden costs of serverless computing. There is also nascent work on building economic models of provider and customer incentives {% cite lin2020serverless %} as well as utility-based pricing {% cite gupta2020utility %}. ",
    "url": "https://serverlessresearch.github.io/literatureguide/economics/",
    "relUrl": "/economics/"
  },"2": {
    "doc": "System Improvements for FaaS",
    "title": "System Improvements for FaaS",
    "content": "A large category of serverless research involves system improvements to FaaS. There is a tension between providing isolation, efficient multiplexing, and low-latency performance. OpenLambda {% cite hendrickson2016serverless %} and McGrath et al. {% cite mcgrath2017serverless %} both developed early prototype FaaS systems that mirrored the inner workings of FaaS platforms and helped illustrate this research challenge. One manifestation of the tension is in cold starts. SOCK {% cite oakes2018sock %} uses various systems techniques to reduce these, particularly for FaaS applications that use libraries with high initialization costs. Catalyzer {% cite du2020catalyzer %} takes on the same challenge, using checkpoints to start functions instead of executing their initialization code. Xanadu {% cite daw2020xanadu %} provides techniques for mitigating cascading cold starts, and Mohan et al. {% cite mohan2019agile %} discuss techniques for preallocating resources such as network interfaces to reduce cold start times. FaaS also incurs cold start latencies and other overheads from the underlying operating system and hypervisor. Firecracker {% cite agache2020firecracker %} is a lightweight microVM technology developed by AWS that reduces the startup times and memory requirements of VM isolation. Koller and Williams {% cite koller2017will %} have suggested using unikernels with FaaS instead of traditional operating systems in a further bid to improve efficiency. There are also alternatives to using VMs for isolation. Faasm {% cite shillaker2020faasm %} provides lightweight isolation based on WebAssembly {% cite haas2017bringing %}. Alto {% cite larisch2018alto %} generalizes lightweight virtualization to other managed runtime environments. Isolation not only creates startup costs but ongoing runtime costs as well. Young et al. {% cite young2019true %} study the performance overheads of gVisor {% cite gvisor %}, which is used by Google's serverless products. Anjali et al. {% cite caraza2020blending %} compare serverless isolation mechanisms, including Linux containers, gVisor, and Firecracker microVMs. Even when no cold starts are involved, the latency of FaaS function invocation can be too high for some applications. Contributing factors include overheads of passing data, queuing overheads, and scheduling overheads or delays. Sonic {% cite mahgoub2021sonic %}, SAND {% cite akkus2018sand %}, SEUSS {% cite cadden2020seuss %}, and Cloudburst {% cite sreekanti2020-ec %} all address various aspects of these slowdowns. Work on scheduling includes that by Kaffes et al. {% cite kaffes2019centralized %}, which uses a centralized scheduler with a global view to eliminate imbalances. FnSched {% cite suresh2019fnsched %} offers another scheduler that aims to improve latency and utilization, and Caerus {% cite zhang2021caerus %} provides scheduling for serverless analytics. Work by Mahmoudi et al. describes an algorithm for adaptive function placement. A diverse assortment set of other work seeks to improve FaaS. Shredder {% cite zhang2019narrowing %} embeds FaaS computations with object storage. Faa\\$T {% cite romero2021transparent %} provides a provider-managed cache for serverless applications. Particle is a network overlay suited to the burstiness of serverless computing {% cite thomas2020particle %}. Gupta {% cite gupta2020serverless %} et al. demonstrate straggler mitigation using error-correcting codes. Kappa {% cite zhang2020kappa %} provides fault tolerance and extended execution times by checkpointing and restarting FaaS applications. InfiniCache {% cite wang2020infinicache %} shows how to use erasure coding to build a cache from idle FaaS instances. Harvest VMs {% cite zhang2021faster %} allows FaaS to run using resources momentarily left idle by traditional server VMs. ",
    "url": "https://serverlessresearch.github.io/literatureguide/faas-system-improvements/",
    "relUrl": "/faas-system-improvements/"
  },"3": {
    "doc": "Stateful Serverless",
    "title": "Stateful Serverless",
    "content": "Augmenting FaaS with state has been the subject of considerable research. One application with specific state management requirements is analytics, which requires ephemeral storage to pass intermediate results between functions {% cite klimovic2018understanding %}. Pocket {% cite klimovic2018pocket %} provides a solution to challenges in this area. Though managing state for analytics can be challenging on account of the volume and transient nature of the data, its simple and well-defined usage patterns lend themselves to optimized solutions. A more general challenge arises in managing changing application state, which is often subject to certain consistency requirements. Serverless computing gives coordination-free techniques an opportunity to shine because they have provable advantages at scale {% cite hellerstein2020keeping %}. Cloudburst {% cite sreekanti2020-ec %} is a stateful FaaS system that integrates with the scalable Anna {% cite wu2019anna %} key-value store. It provides local caches in function instances and transactional causal consistency {% cite wu2020transactional %}. FaaSTCC {% cite lykhenko2021faastcc %} is another system that provides similar guarantees. An alternative approach is to use an underlying logging infrastructure to represent state. Logging involves coordination, but it can provide strong consistency and better throughput scaling than distributed protocols such as two-phase commit {% cite abadi2018overview %}. Beldi {% cite zhang2020fault %} and work by de Heus et al. {% cite de2021distributed %} both provide transaction mechanisms that integrate FaaS and underlying storage. Boki {% cite jia2021boki %} and Retro-$\\lambda$ {% cite meissner2018retro %} also make use of an underlying log to manage state. Azure Functions {% cite azurefunctions %} includes \"durable functions\" in its production offering. Durable functions use a checkpoint mechanism to allow long-running execution on top of a FaaS runtime. In this programming model, state can be maintained reliably and for long periods of time within the functions themselves. Burckhardt et al. {% cite burckhardt2021durable %} provide a formal model of durable functions and show that various implementations are possible. Stateful serverless must reckon with faults. AFT {% cite sreekanti2020fault %} provides a fault tolerance shim that can be interposed between a FaaS environment and underlying storage, providing atomicity guarantees. Ray {% cite moritz2018ray %} is not derived from FaaS but offers similar scalability and fits under the broader definition of serverless. The platform has served as a proving ground for various novel fault tolerance approaches {% cite wang2019lineage zhuang2021hoplite %}. Other work on stateful serverless computing includes SFL {% cite brand2021sfl %}, a compiler for generating stateful serverless applications. ",
    "url": "https://serverlessresearch.github.io/literatureguide/stateful-serverless/",
    "relUrl": "/stateful-serverless/"
  },"4": {
    "doc": "Autoscaling, Optimization, and Quality of Service",
    "title": "Autoscaling, Optimization, and Quality of Service",
    "content": "Autoscaling is a defining characteristic of serverless computing, so a great deal of research touches on it in some way. Autoscaling must balance quality of service and cost, and the work we highlight here relates directly to this tradeoff. Even with FaaS, customers are still required to configure some resources, notably the \"memory size,\" which serves as a proxy for instance execution resources. Sizeless {% cite eismann2021sizeless %} and COSE {% cite akhtar2020cose %} analyze functions as they run, attempting to find optimal resource configurations. Winzinger and Wirtz {% cite winzinger2019model %} also provide a model for FaaS execution. There are multiple approaches to quality of service: Sequoia {% cite tariq2020sequoia %} targets policy goals, whereas Atoll {% cite singhvi2021atoll %} focuses on latency objectivs. An eclectic mix of work rounds out the early autoscaling-focused efforts. Yussupov et al. {% cite yussupov2019serverless %} study how to reengineer existing applications for scalability, introducing the notion of \"serverless parachutes\" that are used only under exceptional load conditions. Spock {% cite gunasekaran2019spock %} uses both server VMs and serverless functions to meet elasticity and cost goals. Anna {% cite wu2018eliminating %} provides autoscaling tiered storage, seeking to optimize for both cost and performance goals. ",
    "url": "https://serverlessresearch.github.io/literatureguide/autoscaling-optimization-quality-of-service/",
    "relUrl": "/autoscaling-optimization-quality-of-service/"
  },"5": {
    "doc": "System Abstractions",
    "title": "System Abstractions",
    "content": "Even popular serverless abstractions such as FaaS are not standardized across cloud providers. SPEC-RG seeks to address this and proposes a reference architecture for FaaS {% cite van2019spec %}. Adopting a broad view of serverless computing also invites proposals for standardized abstractions of storage and communication, which round out the core features of an operating system. Pemberton et al. {% cite pemberton2021restless %} outline this need, whereas ServerlessOS {% cite al2018making %} offers a concrete proposal. LegoOS {% cite shan2018legoos %} provides operating system abstractions for hardware disaggregation. Though not positioned as serverless, it addresses the same core concerns. ",
    "url": "https://serverlessresearch.github.io/literatureguide/system-abstractions/",
    "relUrl": "/system-abstractions/"
  },"6": {
    "doc": "Monitoring and Debugging",
    "title": "Monitoring and Debugging",
    "content": "Many of the tools traditionally used for debugging and monitoring applications do not carry over to FaaS, which creates a need for new solutions. Watchtower {% cite alpernas2021cloud %} monitors runtime invariants for FaaS applications. Borges et al. {% cite borges2021faaster %} design and evaluate multiple approaches to distributed tracing. Manner et al. {% cite manner2019troubleshooting %} provide a combined monitoring and debugging solution for FaaS. ",
    "url": "https://serverlessresearch.github.io/literatureguide/monitoring-and-debugging/",
    "relUrl": "/monitoring-and-debugging/"
  },"7": {
    "doc": "Formal Methods",
    "title": "Formal Methods",
    "content": "Several authors have proposed formal models of FaaS. Jangda et al. {% cite jangda2019formal %} and Obetz et al. {% cite obetz2020formalizing %} both introduce formal models of FaaS and event-driven computation. Gabrielli et al. {% cite gabbrielli2019no %} propose the Serverless Kernel Calculus, which is similar and includes a stateful extension. Burckhardt et al. {% cite burckhardt2021durable %} analyze durable functions in the context of a formal model, providing one demonstration of the value of these techniques. ",
    "url": "https://serverlessresearch.github.io/literatureguide/formal-methods/",
    "relUrl": "/formal-methods/"
  },"8": {
    "doc": "Security",
    "title": "Security",
    "content": "The transition to a serverless model has many implications for security. Established techniques such as secure enclaves can be used with FaaS, but doing so requires overcoming various obstacles {% cite trach2019clemmys qiang2018se goltzsche2019acctee %}. Fine-grained isolation in FaaS offers potential security benefits, but it will be difficult for programmers to take advantage of this without supporting tools and techniques. Information flow control {% cite sabelfeld2003language %} provides the basis for some approaches, including Valve {% cite datta2020valve %} and work by Alpernas et al. {% cite alpernas2018secure %}. Will.iam {% cite sankaran2020workflow %} a produces more robust permission boundaries through workflow integration, and Hong et al. {% cite hong2018go %} suggest a collection of design patterns that can help develop secure serverless applications. Researchers have found that serverless computing is susceptible to novel forms of attack. For example, Kelly et al. {% cite bocci2021secure %} describe \"denial of wallet\" attacks that exploit the scalability of serverless computing to exhaust the victim's budget. The Warmonger attack {% cite xiong2021warmonger %} is a type of denial of service attack that exploits multi-tenant infrastructure to introduce abusive activity on a victim's IPs, leading other services to block them. Work has also focused on analyzing the security of specific applications, e.g., the OmniBallot online voting system {% cite specter2021security %}. ",
    "url": "https://serverlessresearch.github.io/literatureguide/security/",
    "relUrl": "/security/"
  },"9": {
    "doc": "Analytics",
    "title": "Analytics",
    "content": "There have been several efforts to apply FaaS to analytics workloads. We touch upon a few examples here and refer the reader to Werner et al. {% cite werner2020evaluation %} for an overview and comparison of serverless data processing frameworks. PyWren {% cite jonas2017occupy %} demonstrated the benefits of simplified cloud programming with a simple FaaS-based framework geared at analytics tasks. Subsequent work by IBM {% cite sampe2018serverless %} extends it with additional constructs, and Locus {% cite pu2019shuffling %} showed how to implement shuffling, a an important analytics primitive, in a FaaS environment. Wukong {% cite carver2020wukong carver2019search %} focuses on optimizing analytics tasks, enhancing locality by minimizing data movement across tasks. In a similar vein, HASTE {% cite arjavalingam2021haste %} focuses on optimizing serverless DAG execution. In the database literature, Lambda {% cite muller2020lambada %} and Starling {% cite perron2020starling %} both and use FaaS to operate on data stored in S3. Flint {% cite kim2018serverless %} tackles the same problem using Apache Spark {% cite zaharia2016apache %}. ",
    "url": "https://serverlessresearch.github.io/literatureguide/analytics/",
    "relUrl": "/analytics/"
  },"10": {
    "doc": "Benchmarks and Data Sets",
    "title": "Benchmarks and Data Sets",
    "content": "Serverless computing stands to benefit from broadly accepted benchmarks. A number of these have been proposed, though a leader has not yet emerged. Contenders include FunctionBench {% cite kim2019functionbench %}, FaaSdom {% cite maissen2020faasdom %}, and Serverlessbench {% cite yu2020characterizing %}. DeathStarBench {% cite gan2019open %} is targeted at microservices as well as FaaS applications. Work by Martins et al. {% cite martins2020benchmarking %} also proposes a benchmark and uses it to compare cloud providers. Scheuner and Leitner {% cite scheuner2020function %} provide a literature review of various FaaS performance evaluations. The need for new benchmarks is especially evident because serverless computing emphasizes autoscaling. The quality of this autoscaling is often referred to as \"elasticity,\" a metaphor that suggests it might be described by a simple number or perhaps a relationship between two variables, as is the case in physics or engineering. So far no such metric has emerged, though work by Kuhlenkamp et al. {% cite kuhlenkamp2020benchmarking %} moves in this direction. ",
    "url": "https://serverlessresearch.github.io/literatureguide/benchmarks-and-data-sets/",
    "relUrl": "/benchmarks-and-data-sets/"
  },"11": {
    "doc": "Serverless in Practice",
    "title": "Serverless in Practice",
    "content": "Understanding how serverless FaaS platforms work is challenging because the leading products are either partially or entirely proprietary. Early efforts to innovate on FaaS devoted significant effort to understanding how FaaS platforms might be implemented {% cite jonas2017occupy hendrickson2016serverless %}. More recent work by Wang et al. {% cite wang2018peeking %} has thoroughly analyzed the major FaaS platforms, documenting their isolation mechanisms, elasticity, coldstart latencies, and container recycling policies. Lee et al. {% cite lee2018evaluation %} provide another evaluation of FaaS providers. Other reports and analyses of real-world experiences are valuable as well. Shahrad et al. {% cite shahrad2020serverless %} describe the production workload of Azure Functions as well as policy optimizations that improve efficiency and quality of service. The Wonderless Dataset {% cite eskandani2021wonderless %} contains open source serverless applications extracted from GitHub. Eismann et al. {% cite eismann2021state %} review various serverless applications and attempt to explain why and when they are successful. Mohanty et al. {% cite mohanty2018evaluation %} evaluate open source serverless computing frameworks. ",
    "url": "https://serverlessresearch.github.io/literatureguide/serverless-in-practice/",
    "relUrl": "/serverless-in-practice/"
  },"12": {
    "doc": "Machine Learning",
    "title": "Machine Learning",
    "content": "FaaS can support machine learning in both training and inference applications. Projects that focus on training include MLLess {% cite sanchez2021experience %} and LambdaML {% cite jiang2021towards %}. Cirrus {% cite carreira2019cirrus %} and Stratum {% cite bhattacharjee2019stratum %} address end-to-end machine learning workflows, which include both training and inference. Inference-focused projects demonstrate serving deep learning models {% cite ishakian2018serving %} and automatic model partitioning for cost optimality and SLO compliance {% cite yu2021gillis %}. GPUs and other accelerators {% cite jouppi2017datacenter %} are commonplace in machine learning but are not presently supported by commercial FaaS offerings. Research that addresses this shortcoming includes work on efficient GPU sharing for serverless workflows {% cite satzke2020efficient %}. Another project, PyPlover {% cite yang2020pyplover %}, is a serverless framework that allows the deployment of GPU code directly to a FaaS environment. ",
    "url": "https://serverlessresearch.github.io/literatureguide/machine-learning/",
    "relUrl": "/machine-learning/"
  },"13": {
    "doc": "Interactive Work",
    "title": "Interactive Work",
    "content": "PyWren {% cite jonas2017occupy %} popularized the notion that serverless computing could empower end-users by simplifying access to cloud computing resources. Whereas PyWren focused on analytics tasks, gg {% cite fouladi2019laptop %} demonstrated how to offload heavy software build jobs. It also provided a framework for scaling interactive tasks in the cloud. Another example of using FaaS for interactive work is sshell {% cite maheo2021serverless %}, which makes it possible to run shell scripts in the cloud in much the same way as one runs them on a local computer. ",
    "url": "https://serverlessresearch.github.io/literatureguide/interactive-work/",
    "relUrl": "/interactive-work/"
  },"14": {
    "doc": "Edge and IoT",
    "title": "Edge and IoT",
    "content": "Serverless computing has generated enthusiasm {% cite aslanpour2021serverless %} in the areas of edge computing {% cite shi2016edge %} and the Internet of Things (IoT) {% cite atzori2010internet %}. IoT envisions embedded computing and communication in sensors, actuators, and everyday electronic items. IoT devices are often resource-constrained, so they may benefit from offloading computation over the network. Edge computing makes it possible to do this while maintaining low latency: It augments the cloud resources in centralized data centers with compute, storage, or other resources placed at the \"edge\" of the network, i.e., near devices. Combining edge computing and IoT presents challenges since devices may move and because the resources available at a particular edge location can become oversubscribed. These are the sorts of challenges that serverless computing is equipped for. This is an active area of research that includes numerous works. Hall et al. {% cite hall2019execution %} suggest an execution model for FaaS at the edge. Gand et al. {% cite gand2020serverless %} describe a containerized management solution for deploying serverless code. Pinto et al. {% cite pinto2018dynamic %} propose dynamically moving functions between an IoT device and the edge. Apollo {% cite smirnov2020apollo %} provides a system for runtime function composition and flexible placement, whereas Costless {% cite elgamal2018costless %} describes an approach to optimization that includes function fusion. LaSS {% cite wang2020lass %} focuses on meeting the needs of latency-sensitive edge applications. Aske and Zhao describe work on supporting multi-provider serverless computing at the edge {% cite aske2018supporting %}. In addition to processing data generated at the edge, serverless models can be applied to disseminating information sourced from centralized data centers, as Facebook does with Bladerunner {% cite barber2021bladerunner %}. ",
    "url": "https://serverlessresearch.github.io/literatureguide/edge-and-iot/",
    "relUrl": "/edge-and-iot/"
  },"15": {
    "doc": "Network Function Virtualization",
    "title": "Network Function Virtualization",
    "content": "Network function virtualization (NFV) {% cite mijumbi2015network %} decouples network functionality from its physical embodiment in hardware. In some ways, it is the equivalent of VMs for network equipment. There have been multiple proposals for serverless NFV {% cite aditya2019will singhvi2020snf %}, which can be viewed as a logical evolution of NFV. Potential applications for serverless NFV include improved quality of service for 5G networks {% cite chaudhry2020improved %}. Work also suggests that it may be practical to combine serverless NFV and edge FaaS deployments {% cite zhang2021tapping %}. ",
    "url": "https://serverlessresearch.github.io/literatureguide/network-function-virtualization/",
    "relUrl": "/network-function-virtualization/"
  },"16": {
    "doc": "Other Applications",
    "title": "Other Applications",
    "content": "Serverless computing, like cloud computing, is a general-purpose technology that can be deployed in many contexts. Use cases that attracted attention early on included chatbots {% cite yan2016building %} and video encoding {% cite fouladi2017encoding %}. Serverless autoscaling also makes sense for disaster response, and several such applications have been studied {% cite franz2018reunifying mejia2020serverless pawloski2019improving %}. Serverless robotics involves motion planning and could occur in the cloud or at the edge {% cite anand2021serverless mejia2020serverless %}. There are applications in the oil and gas industry {% cite hussain2019serverless %} and in geospatial computing {% cite bebortta2020geospatial %}. Virtual environments, including games, are another application area {% cite donkervliet2020towards %}. DevOps, which involves things like software testing, is a bursty workload that stands to benefit from serverless computing {% cite ivanov2018implementation %}. There have also been proposals to use FaaS to enable blockchain applications {% cite chen2018fbaas %} and to execute FaaS on blockchain infrastructure {% cite ghaemi2020chainfaas %}. Various scientific applications may benefit from serverless computing. In the high-performance computing space, high invocation rates and short deadlines could challenge existing technologies, but FaaS might provide useful benefits {% cite nguyen2020motivating spillner2017faaster %}. Other examples of scientific applications of FaaS include federated function serving {% cite chard2020funcx %}, serverless linear algebra {% cite shankar2020serverless %}, and a distributed parallel analysis engine for high-energy physics {% cite kusnierz2020distributed %}. ",
    "url": "https://serverlessresearch.github.io/literatureguide/other-applications/",
    "relUrl": "/other-applications/"
  },"17": {
    "doc": "Home",
    "title": "Home",
    "content": "This *Serverless Literature Guide* aims to provide an overview of a once-niche field that has grown rapidly. A quick [search on DBLP](https://dblp.org/search?q=serverless) shows how the number of publications about *serverless* has grown year-by-year. | Year | Publications |------|-------------:| 2016 | 9 | 2017 | 31 | 2018 | 68 | 2019 | 137 | 2020 | 176 | 2021 | 236 | Our aim is to include peer-reviewed publications in prominent venues, as well as other work that has attracted substantial attention. A project of this nature is destined to be out-of-date almost the moment it is published, and we therefore encourage the community to contribute additions by submitting pull requests to the [GitHub repository](https://github.com/serverlessresearch/literatureguide). {% include license.html %} ",
    "url": "https://serverlessresearch.github.io/literatureguide/",
    "relUrl": "/"
  }
}
